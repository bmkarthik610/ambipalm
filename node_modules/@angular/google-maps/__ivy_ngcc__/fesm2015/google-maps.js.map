{"version":3,"sources":["C:/Users/NI7593/Desktop/project/ambipalm/node_modules/@angular/google-maps/fesm2015/google-maps.js"],"names":[],"mappings":"AAAA","file":"google-maps.js","sourcesContent":["import { Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, NgZone, Optional, Inject, PLATFORM_ID, Input, Output, Directive, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Observable, BehaviorSubject, Subject, combineLatest } from 'rxjs';\nimport { map, take, shareReplay, takeUntil } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Manages event on a Google Maps object, ensuring that events are added only when necessary. */\nclass MapEventManager {\n    constructor(_ngZone) {\n        this._ngZone = _ngZone;\n        /** Pending listeners that were added before the target was set. */\n        this._pending = [];\n        this._listeners = [];\n    }\n    /** Clears all currently-registered event listeners. */\n    _clearListeners() {\n        for (let listener of this._listeners) {\n            listener.remove();\n        }\n        this._listeners = [];\n    }\n    /** Gets an observable that adds an event listener to the map when a consumer subscribes to it. */\n    getLazyEmitter(name) {\n        const observable = new Observable(observer => {\n            // If the target hasn't been initialized yet, cache the observer so it can be added later.\n            if (!this._target) {\n                this._pending.push({ observable, observer });\n                return undefined;\n            }\n            const listener = this._target.addListener(name, (event) => {\n                this._ngZone.run(() => observer.next(event));\n            });\n            this._listeners.push(listener);\n            return () => listener.remove();\n        });\n        return observable;\n    }\n    /** Sets the current target that the manager should bind events to. */\n    setTarget(target) {\n        if (target === this._target) {\n            return;\n        }\n        // Clear the listeners from the pre-existing target.\n        if (this._target) {\n            this._clearListeners();\n            this._pending = [];\n        }\n        this._target = target;\n        // Add the listeners that were bound before the map was initialized.\n        this._pending.forEach(subscriber => subscriber.observable.subscribe(subscriber.observer));\n        this._pending = [];\n    }\n    /** Destroys the manager and clears the event listeners. */\n    destroy() {\n        this._clearListeners();\n        this._pending = [];\n        this._target = undefined;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** default options set to the Googleplex */\nconst DEFAULT_OPTIONS = {\n    center: { lat: 37.421995, lng: -122.084092 },\n    zoom: 17\n};\n/** Arbitrary default height for the map element */\nconst DEFAULT_HEIGHT = '500px';\n/** Arbitrary default width for the map element */\nconst DEFAULT_WIDTH = '500px';\n/**\n * Angular component that renders a Google Map via the Google Maps JavaScript\n * API.\n * @see https://developers.google.com/maps/documentation/javascript/reference/\n */\nlet GoogleMap = /** @class */ (() => {\n    class GoogleMap {\n        constructor(_elementRef, _ngZone, \n        /**\n         * @deprecated `platformId` parameter to become required.\n         * @breaking-change 10.0.0\n         */\n        platformId) {\n            this._elementRef = _elementRef;\n            this._ngZone = _ngZone;\n            this._eventManager = new MapEventManager(this._ngZone);\n            this._options = new BehaviorSubject(DEFAULT_OPTIONS);\n            this._center = new BehaviorSubject(undefined);\n            this._zoom = new BehaviorSubject(undefined);\n            this._destroy = new Subject();\n            /** Height of the map. */\n            this.height = DEFAULT_HEIGHT;\n            /** Width of the map. */\n            this.width = DEFAULT_WIDTH;\n            /**\n             * See\n             * https://developers.google.com/maps/documentation/javascript/reference/map#Map.bounds_changed\n             */\n            this.boundsChanged = this._eventManager.getLazyEmitter('bounds_changed');\n            /**\n             * See\n             * https://developers.google.com/maps/documentation/javascript/reference/map#Map.center_changed\n             */\n            this.centerChanged = this._eventManager.getLazyEmitter('center_changed');\n            /**\n             * See\n             * https://developers.google.com/maps/documentation/javascript/reference/map#Map.click\n             */\n            this.mapClick = this._eventManager.getLazyEmitter('click');\n            /**\n             * See\n             * https://developers.google.com/maps/documentation/javascript/reference/map#Map.dblclick\n             */\n            this.mapDblclick = this._eventManager.getLazyEmitter('dblclick');\n            /**\n             * See\n             * https://developers.google.com/maps/documentation/javascript/reference/map#Map.drag\n             */\n            this.mapDrag = this._eventManager.getLazyEmitter('drag');\n            /**\n             * See\n             * https://developers.google.com/maps/documentation/javascript/reference/map#Map.dragend\n             */\n            this.mapDragend = this._eventManager.getLazyEmitter('dragend');\n            /**\n             * See\n             * https://developers.google.com/maps/documentation/javascript/reference/map#Map.dragstart\n             */\n            this.mapDragstart = this._eventManager.getLazyEmitter('dragstart');\n            /**\n             * See\n             * https://developers.google.com/maps/documentation/javascript/reference/map#Map.heading_changed\n             */\n            this.headingChanged = this._eventManager.getLazyEmitter('heading_changed');\n            /**\n             * See\n             * https://developers.google.com/maps/documentation/javascript/reference/map#Map.idle\n             */\n            this.idle = this._eventManager.getLazyEmitter('idle');\n            /**\n             * See\n             * https://developers.google.com/maps/documentation/javascript/reference/map#Map.maptypeid_changed\n             */\n            this.maptypeidChanged = this._eventManager.getLazyEmitter('maptypeid_changed');\n            /**\n             * See\n             * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mousemove\n             */\n            this.mapMousemove = this._eventManager.getLazyEmitter('mousemove');\n            /**\n             * See\n             * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mouseout\n             */\n            this.mapMouseout = this._eventManager.getLazyEmitter('mouseout');\n            /**\n             * See\n             * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mouseover\n             */\n            this.mapMouseover = this._eventManager.getLazyEmitter('mouseover');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/map#Map.projection_changed\n             */\n            this.projectionChanged = this._eventManager.getLazyEmitter('projection_changed');\n            /**\n             * See\n             * https://developers.google.com/maps/documentation/javascript/reference/map#Map.rightclick\n             */\n            this.mapRightclick = this._eventManager.getLazyEmitter('rightclick');\n            /**\n             * See\n             * https://developers.google.com/maps/documentation/javascript/reference/map#Map.tilesloaded\n             */\n            this.tilesloaded = this._eventManager.getLazyEmitter('tilesloaded');\n            /**\n             * See\n             * https://developers.google.com/maps/documentation/javascript/reference/map#Map.tilt_changed\n             */\n            this.tiltChanged = this._eventManager.getLazyEmitter('tilt_changed');\n            /**\n             * See\n             * https://developers.google.com/maps/documentation/javascript/reference/map#Map.zoom_changed\n             */\n            this.zoomChanged = this._eventManager.getLazyEmitter('zoom_changed');\n            // @breaking-change 10.0.0 Remove null check for `platformId`.\n            this._isBrowser =\n                platformId ? isPlatformBrowser(platformId) : typeof window === 'object' && !!window;\n            if (this._isBrowser) {\n                const googleMapsWindow = window;\n                if (!googleMapsWindow.google) {\n                    throw Error('Namespace google not found, cannot construct embedded google ' +\n                        'map. Please install the Google Maps JavaScript API: ' +\n                        'https://developers.google.com/maps/documentation/javascript/' +\n                        'tutorial#Loading_the_Maps_API');\n                }\n            }\n        }\n        set center(center) {\n            this._center.next(center);\n        }\n        set zoom(zoom) {\n            this._zoom.next(zoom);\n        }\n        set options(options) {\n            this._options.next(options || DEFAULT_OPTIONS);\n        }\n        ngOnChanges() {\n            this._setSize();\n            if (this.googleMap && this.mapTypeId) {\n                this.googleMap.setMapTypeId(this.mapTypeId);\n            }\n        }\n        ngOnInit() {\n            // It should be a noop during server-side rendering.\n            if (this._isBrowser) {\n                this._mapEl = this._elementRef.nativeElement.querySelector('.map-container');\n                this._setSize();\n                this._googleMapChanges = this._initializeMap(this._combineOptions());\n                this._googleMapChanges.subscribe((googleMap) => {\n                    this.googleMap = googleMap;\n                    this._eventManager.setTarget(this.googleMap);\n                });\n                this._watchForOptionsChanges();\n                this._watchForCenterChanges();\n                this._watchForZoomChanges();\n            }\n        }\n        ngOnDestroy() {\n            this._eventManager.destroy();\n            this._destroy.next();\n            this._destroy.complete();\n        }\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.fitBounds\n         */\n        fitBounds(bounds, padding) {\n            this._assertInitialized();\n            this.googleMap.fitBounds(bounds, padding);\n        }\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.panBy\n         */\n        panBy(x, y) {\n            this._assertInitialized();\n            this.googleMap.panBy(x, y);\n        }\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.panTo\n         */\n        panTo(latLng) {\n            this._assertInitialized();\n            this.googleMap.panTo(latLng);\n        }\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.panToBounds\n         */\n        panToBounds(latLngBounds, padding) {\n            this._assertInitialized();\n            this.googleMap.panToBounds(latLngBounds, padding);\n        }\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getBounds\n         */\n        getBounds() {\n            this._assertInitialized();\n            return this.googleMap.getBounds() || null;\n        }\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getCenter\n         */\n        getCenter() {\n            this._assertInitialized();\n            return this.googleMap.getCenter();\n        }\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getClickableIcons\n         */\n        getClickableIcons() {\n            this._assertInitialized();\n            return this.googleMap.getClickableIcons();\n        }\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getHeading\n         */\n        getHeading() {\n            this._assertInitialized();\n            return this.googleMap.getHeading();\n        }\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getMapTypeId\n         */\n        getMapTypeId() {\n            this._assertInitialized();\n            return this.googleMap.getMapTypeId();\n        }\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getProjection\n         */\n        getProjection() {\n            this._assertInitialized();\n            return this.googleMap.getProjection();\n        }\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getStreetView\n         */\n        getStreetView() {\n            this._assertInitialized();\n            return this.googleMap.getStreetView();\n        }\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getTilt\n         */\n        getTilt() {\n            this._assertInitialized();\n            return this.googleMap.getTilt();\n        }\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.getZoom\n         */\n        getZoom() {\n            this._assertInitialized();\n            return this.googleMap.getZoom();\n        }\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.controls\n         */\n        get controls() {\n            this._assertInitialized();\n            return this.googleMap.controls;\n        }\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.data\n         */\n        get data() {\n            this._assertInitialized();\n            return this.googleMap.data;\n        }\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.mapTypes\n         */\n        get mapTypes() {\n            this._assertInitialized();\n            return this.googleMap.mapTypes;\n        }\n        /**\n         * See\n         * https://developers.google.com/maps/documentation/javascript/reference/map#Map.overlayMapTypes\n         */\n        get overlayMapTypes() {\n            this._assertInitialized();\n            return this.googleMap.overlayMapTypes;\n        }\n        _setSize() {\n            if (this._mapEl) {\n                const styles = this._mapEl.style;\n                styles.height = coerceCssPixelValue(this.height) || DEFAULT_HEIGHT;\n                styles.width = coerceCssPixelValue(this.width) || DEFAULT_WIDTH;\n            }\n        }\n        /** Combines the center and zoom and the other map options into a single object */\n        _combineOptions() {\n            return combineLatest([this._options, this._center, this._zoom])\n                .pipe(map(([options, center, zoom]) => {\n                const combinedOptions = Object.assign(Object.assign({}, options), { center: center || options.center, zoom: zoom !== undefined ? zoom : options.zoom, mapTypeId: this.mapTypeId });\n                return combinedOptions;\n            }));\n        }\n        _initializeMap(optionsChanges) {\n            return optionsChanges.pipe(take(1), map(options => {\n                // Create the object outside the zone so its events don't trigger change detection.\n                // We'll bring it back in inside the `MapEventManager` only for the events that the\n                // user has subscribed to.\n                return this._ngZone.runOutsideAngular(() => new google.maps.Map(this._mapEl, options));\n            }), shareReplay(1));\n        }\n        _watchForOptionsChanges() {\n            combineLatest([this._googleMapChanges, this._options])\n                .pipe(takeUntil(this._destroy))\n                .subscribe(([googleMap, options]) => {\n                googleMap.setOptions(options);\n            });\n        }\n        _watchForCenterChanges() {\n            combineLatest([this._googleMapChanges, this._center])\n                .pipe(takeUntil(this._destroy))\n                .subscribe(([googleMap, center]) => {\n                if (center) {\n                    googleMap.setCenter(center);\n                }\n            });\n        }\n        _watchForZoomChanges() {\n            combineLatest([this._googleMapChanges, this._zoom])\n                .pipe(takeUntil(this._destroy))\n                .subscribe(([googleMap, zoom]) => {\n                if (zoom !== undefined) {\n                    googleMap.setZoom(zoom);\n                }\n            });\n        }\n        /** Asserts that the map has been initialized. */\n        _assertInitialized() {\n            if (!this.googleMap) {\n                throw Error('Cannot access Google Map information before the API has been initialized. ' +\n                    'Please wait for the API to load before trying to interact with it.');\n            }\n        }\n    }\n    GoogleMap.decorators = [\n        { type: Component, args: [{\n                    selector: 'google-map',\n                    exportAs: 'googleMap',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: '<div class=\"map-container\"></div><ng-content></ng-content>',\n                    encapsulation: ViewEncapsulation.None\n                },] }\n    ];\n    GoogleMap.ctorParameters = () => [\n        { type: ElementRef },\n        { type: NgZone },\n        { type: Object, decorators: [{ type: Optional }, { type: Inject, args: [PLATFORM_ID,] }] }\n    ];\n    GoogleMap.propDecorators = {\n        height: [{ type: Input }],\n        width: [{ type: Input }],\n        mapTypeId: [{ type: Input }],\n        center: [{ type: Input }],\n        zoom: [{ type: Input }],\n        options: [{ type: Input }],\n        boundsChanged: [{ type: Output }],\n        centerChanged: [{ type: Output }],\n        mapClick: [{ type: Output }],\n        mapDblclick: [{ type: Output }],\n        mapDrag: [{ type: Output }],\n        mapDragend: [{ type: Output }],\n        mapDragstart: [{ type: Output }],\n        headingChanged: [{ type: Output }],\n        idle: [{ type: Output }],\n        maptypeidChanged: [{ type: Output }],\n        mapMousemove: [{ type: Output }],\n        mapMouseout: [{ type: Output }],\n        mapMouseover: [{ type: Output }],\n        projectionChanged: [{ type: Output }],\n        mapRightclick: [{ type: Output }],\n        tilesloaded: [{ type: Output }],\n        tiltChanged: [{ type: Output }],\n        zoomChanged: [{ type: Output }]\n    };\n    return GoogleMap;\n})();\nconst cssUnitsPattern = /([A-Za-z%]+)$/;\n/** Coerces a value to a CSS pixel value. */\nfunction coerceCssPixelValue(value) {\n    if (value == null) {\n        return '';\n    }\n    return cssUnitsPattern.test(value) ? value : `${value}px`;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Angular component that renders a Google Maps Circle via the Google Maps JavaScript API.\n * @see developers.google.com/maps/documentation/javascript/reference/polygon#Circle\n */\nlet MapCircle = /** @class */ (() => {\n    class MapCircle {\n        constructor(_map, _ngZone) {\n            this._map = _map;\n            this._ngZone = _ngZone;\n            this._eventManager = new MapEventManager(this._ngZone);\n            this._options = new BehaviorSubject({});\n            this._center = new BehaviorSubject(undefined);\n            this._radius = new BehaviorSubject(undefined);\n            this._destroyed = new Subject();\n            /**\n             * @see\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.center_changed\n             */\n            this.centerChanged = this._eventManager.getLazyEmitter('center_changed');\n            /**\n             * @see\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.click\n             */\n            this.circleClick = this._eventManager.getLazyEmitter('click');\n            /**\n             * @see\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.dblclick\n             */\n            this.circleDblclick = this._eventManager.getLazyEmitter('dblclick');\n            /**\n             * @see\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.drag\n             */\n            this.circleDrag = this._eventManager.getLazyEmitter('drag');\n            /**\n             * @see\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.dragend\n             */\n            this.circleDragend = this._eventManager.getLazyEmitter('dragend');\n            /**\n             * @see\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.dragstart\n             */\n            this.circleDragstart = this._eventManager.getLazyEmitter('dragstart');\n            /**\n             * @see\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mousedown\n             */\n            this.circleMousedown = this._eventManager.getLazyEmitter('mousedown');\n            /**\n             * @see\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mousemove\n             */\n            this.circleMousemove = this._eventManager.getLazyEmitter('mousemove');\n            /**\n             * @see\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mouseout\n             */\n            this.circleMouseout = this._eventManager.getLazyEmitter('mouseout');\n            /**\n             * @see\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mouseover\n             */\n            this.circleMouseover = this._eventManager.getLazyEmitter('mouseover');\n            /**\n             * @see\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.mouseup\n             */\n            this.circleMouseup = this._eventManager.getLazyEmitter('mouseup');\n            /**\n             * @see\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.radius_changed\n             */\n            this.radiusChanged = this._eventManager.getLazyEmitter('radius_changed');\n            /**\n             * @see\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.rightclick\n             */\n            this.circleRightclick = this._eventManager.getLazyEmitter('rightclick');\n        }\n        set options(options) {\n            this._options.next(options || {});\n        }\n        set center(center) {\n            this._center.next(center);\n        }\n        set radius(radius) {\n            this._radius.next(radius);\n        }\n        ngOnInit() {\n            if (this._map._isBrowser) {\n                this._combineOptions().pipe(take(1)).subscribe(options => {\n                    // Create the object outside the zone so its events don't trigger change detection.\n                    // We'll bring it back in inside the `MapEventManager` only for the events that the\n                    // user has subscribed to.\n                    this._ngZone.runOutsideAngular(() => {\n                        this.circle = new google.maps.Circle(options);\n                    });\n                    this._assertInitialized();\n                    this.circle.setMap(this._map.googleMap);\n                    this._eventManager.setTarget(this.circle);\n                });\n                this._watchForOptionsChanges();\n                this._watchForCenterChanges();\n                this._watchForRadiusChanges();\n            }\n        }\n        ngOnDestroy() {\n            this._eventManager.destroy();\n            this._destroyed.next();\n            this._destroyed.complete();\n            if (this.circle) {\n                this.circle.setMap(null);\n            }\n        }\n        /**\n         * @see\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getBounds\n         */\n        getBounds() {\n            this._assertInitialized();\n            return this.circle.getBounds();\n        }\n        /**\n         * @see\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getCenter\n         */\n        getCenter() {\n            this._assertInitialized();\n            return this.circle.getCenter();\n        }\n        /**\n         * @see\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getDraggable\n         */\n        getDraggable() {\n            this._assertInitialized();\n            return this.circle.getDraggable();\n        }\n        /**\n         * @see\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getEditable\n         */\n        getEditable() {\n            this._assertInitialized();\n            return this.circle.getEditable();\n        }\n        /**\n         * @see\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getCenter\n         */\n        getRadius() {\n            this._assertInitialized();\n            return this.circle.getRadius();\n        }\n        /**\n         * @see\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Circle.getVisible\n         */\n        getVisible() {\n            this._assertInitialized();\n            return this.circle.getVisible();\n        }\n        _combineOptions() {\n            return combineLatest([this._options, this._center, this._radius])\n                .pipe(map(([options, center, radius]) => {\n                const combinedOptions = Object.assign(Object.assign({}, options), { center: center || options.center, radius: radius !== undefined ? radius : options.radius });\n                return combinedOptions;\n            }));\n        }\n        _watchForOptionsChanges() {\n            this._options.pipe(takeUntil(this._destroyed)).subscribe(options => {\n                this._assertInitialized();\n                this.circle.setOptions(options);\n            });\n        }\n        _watchForCenterChanges() {\n            this._center.pipe(takeUntil(this._destroyed)).subscribe(center => {\n                if (center) {\n                    this._assertInitialized();\n                    this.circle.setCenter(center);\n                }\n            });\n        }\n        _watchForRadiusChanges() {\n            this._radius.pipe(takeUntil(this._destroyed)).subscribe(radius => {\n                if (radius !== undefined) {\n                    this._assertInitialized();\n                    this.circle.setRadius(radius);\n                }\n            });\n        }\n        _assertInitialized() {\n            if (!this._map.googleMap) {\n                throw Error('Cannot access Google Map information before the API has been initialized. ' +\n                    'Please wait for the API to load before trying to interact with it.');\n            }\n            if (!this.circle) {\n                throw Error('Cannot interact with a Google Map Circle before it has been ' +\n                    'initialized. Please wait for the Circle to load before trying to interact with it.');\n            }\n        }\n    }\n    MapCircle.decorators = [\n        { type: Directive, args: [{\n                    selector: 'map-circle',\n                    exportAs: 'mapCircle',\n                },] }\n    ];\n    MapCircle.ctorParameters = () => [\n        { type: GoogleMap },\n        { type: NgZone }\n    ];\n    MapCircle.propDecorators = {\n        options: [{ type: Input }],\n        center: [{ type: Input }],\n        radius: [{ type: Input }],\n        centerChanged: [{ type: Output }],\n        circleClick: [{ type: Output }],\n        circleDblclick: [{ type: Output }],\n        circleDrag: [{ type: Output }],\n        circleDragend: [{ type: Output }],\n        circleDragstart: [{ type: Output }],\n        circleMousedown: [{ type: Output }],\n        circleMousemove: [{ type: Output }],\n        circleMouseout: [{ type: Output }],\n        circleMouseover: [{ type: Output }],\n        circleMouseup: [{ type: Output }],\n        radiusChanged: [{ type: Output }],\n        circleRightclick: [{ type: Output }]\n    };\n    return MapCircle;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Angular component that renders a Google Maps Ground Overlay via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/image-overlay#GroundOverlay\n */\nlet MapGroundOverlay = /** @class */ (() => {\n    class MapGroundOverlay {\n        constructor(_map, _ngZone) {\n            this._map = _map;\n            this._ngZone = _ngZone;\n            this._eventManager = new MapEventManager(this._ngZone);\n            this._opacity = new BehaviorSubject(1);\n            this._url = new BehaviorSubject('');\n            this._destroyed = new Subject();\n            /** Whether the overlay is clickable */\n            this.clickable = false;\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/image-overlay#GroundOverlay.click\n             */\n            this.mapClick = this._eventManager.getLazyEmitter('click');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/image-overlay\n             * #GroundOverlay.dblclick\n             */\n            this.mapDblclick = this._eventManager.getLazyEmitter('dblclick');\n        }\n        /** URL of the image that will be shown in the overlay. */\n        set url(url) {\n            this._url.next(url);\n        }\n        /** Opacity of the overlay. */\n        set opacity(opacity) {\n            this._opacity.next(opacity);\n        }\n        ngOnInit() {\n            if (!this.bounds) {\n                throw Error('Image bounds are required');\n            }\n            if (this._map._isBrowser) {\n                this._combineOptions().pipe(take(1)).subscribe(options => {\n                    // Create the object outside the zone so its events don't trigger change detection.\n                    // We'll bring it back in inside the `MapEventManager` only for the events that the\n                    // user has subscribed to.\n                    this._ngZone.runOutsideAngular(() => {\n                        this.groundOverlay =\n                            new google.maps.GroundOverlay(this._url.getValue(), this.bounds, options);\n                    });\n                    this._assertInitialized();\n                    this.groundOverlay.setMap(this._map.googleMap);\n                    this._eventManager.setTarget(this.groundOverlay);\n                });\n                this._watchForOpacityChanges();\n                this._watchForUrlChanges();\n            }\n        }\n        ngOnDestroy() {\n            this._eventManager.destroy();\n            this._destroyed.next();\n            this._destroyed.complete();\n            if (this.groundOverlay) {\n                this.groundOverlay.setMap(null);\n            }\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/image-overlay\n         * #GroundOverlay.getBounds\n         */\n        getBounds() {\n            this._assertInitialized();\n            return this.groundOverlay.getBounds();\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/image-overlay\n         * #GroundOverlay.getOpacity\n         */\n        getOpacity() {\n            this._assertInitialized();\n            return this.groundOverlay.getOpacity();\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/image-overlay\n         * #GroundOverlay.getUrl\n         */\n        getUrl() {\n            this._assertInitialized();\n            return this.groundOverlay.getUrl();\n        }\n        _combineOptions() {\n            return this._opacity.pipe(map(opacity => {\n                const combinedOptions = {\n                    clickable: this.clickable,\n                    opacity,\n                };\n                return combinedOptions;\n            }));\n        }\n        _watchForOpacityChanges() {\n            this._opacity.pipe(takeUntil(this._destroyed)).subscribe(opacity => {\n                if (opacity) {\n                    this._assertInitialized();\n                    this.groundOverlay.setOpacity(opacity);\n                }\n            });\n        }\n        _watchForUrlChanges() {\n            this._url.pipe(takeUntil(this._destroyed)).subscribe(url => {\n                this._assertInitialized();\n                const overlay = this.groundOverlay;\n                overlay.set('url', url);\n                // Google Maps only redraws the overlay if we re-set the map.\n                overlay.setMap(null);\n                overlay.setMap(this._map.googleMap);\n            });\n        }\n        _assertInitialized() {\n            if (!this._map.googleMap) {\n                throw Error('Cannot access Google Map information before the API has been initialized. ' +\n                    'Please wait for the API to load before trying to interact with it.');\n            }\n            if (!this.groundOverlay) {\n                throw Error('Cannot interact with a Google Map GroundOverlay before it has been initialized. ' +\n                    'Please wait for the GroundOverlay to load before trying to interact with it.');\n            }\n        }\n    }\n    MapGroundOverlay.decorators = [\n        { type: Directive, args: [{\n                    selector: 'map-ground-overlay',\n                    exportAs: 'mapGroundOverlay',\n                },] }\n    ];\n    MapGroundOverlay.ctorParameters = () => [\n        { type: GoogleMap },\n        { type: NgZone }\n    ];\n    MapGroundOverlay.propDecorators = {\n        url: [{ type: Input }],\n        bounds: [{ type: Input }],\n        clickable: [{ type: Input }],\n        opacity: [{ type: Input }],\n        mapClick: [{ type: Output }],\n        mapDblclick: [{ type: Output }]\n    };\n    return MapGroundOverlay;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Angular component that renders a Google Maps info window via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/info-window\n */\nlet MapInfoWindow = /** @class */ (() => {\n    class MapInfoWindow {\n        constructor(_googleMap, _elementRef, _ngZone) {\n            this._googleMap = _googleMap;\n            this._elementRef = _elementRef;\n            this._ngZone = _ngZone;\n            this._eventManager = new MapEventManager(this._ngZone);\n            this._options = new BehaviorSubject({});\n            this._position = new BehaviorSubject(undefined);\n            this._destroy = new Subject();\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.closeclick\n             */\n            this.closeclick = this._eventManager.getLazyEmitter('closeclick');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/info-window\n             * #InfoWindow.content_changed\n             */\n            this.contentChanged = this._eventManager.getLazyEmitter('content_changed');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.domready\n             */\n            this.domready = this._eventManager.getLazyEmitter('domready');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/info-window\n             * #InfoWindow.position_changed\n             */\n            this.positionChanged = this._eventManager.getLazyEmitter('position_changed');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/info-window\n             * #InfoWindow.zindex_changed\n             */\n            this.zindexChanged = this._eventManager.getLazyEmitter('zindex_changed');\n        }\n        set options(options) {\n            this._options.next(options || {});\n        }\n        set position(position) {\n            this._position.next(position);\n        }\n        ngOnInit() {\n            if (this._googleMap._isBrowser) {\n                const combinedOptionsChanges = this._combineOptions();\n                combinedOptionsChanges.pipe(take(1)).subscribe(options => {\n                    // Create the object outside the zone so its events don't trigger change detection.\n                    // We'll bring it back in inside the `MapEventManager` only for the events that the\n                    // user has subscribed to.\n                    this._ngZone.runOutsideAngular(() => {\n                        this.infoWindow = new google.maps.InfoWindow(options);\n                    });\n                    this._eventManager.setTarget(this.infoWindow);\n                });\n                this._watchForOptionsChanges();\n                this._watchForPositionChanges();\n            }\n        }\n        ngOnDestroy() {\n            this._eventManager.destroy();\n            this._destroy.next();\n            this._destroy.complete();\n            // If no info window has been created on the server, we do not try closing it.\n            // On the server, an info window cannot be created and this would cause errors.\n            if (this.infoWindow) {\n                this.close();\n            }\n        }\n        /**\n         * See developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.close\n         */\n        close() {\n            this._assertInitialized();\n            this.infoWindow.close();\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.getContent\n         */\n        getContent() {\n            this._assertInitialized();\n            return this.infoWindow.getContent();\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/info-window\n         * #InfoWindow.getPosition\n         */\n        getPosition() {\n            this._assertInitialized();\n            return this.infoWindow.getPosition();\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/info-window#InfoWindow.getZIndex\n         */\n        getZIndex() {\n            this._assertInitialized();\n            return this.infoWindow.getZIndex();\n        }\n        /**\n         * Opens the MapInfoWindow using the provided anchor. If the anchor is not set,\n         * then the position property of the options input is used instead.\n         */\n        open(anchor) {\n            this._assertInitialized();\n            this._elementRef.nativeElement.style.display = '';\n            this.infoWindow.open(this._googleMap.googleMap, anchor ? anchor.getAnchor() : undefined);\n        }\n        _combineOptions() {\n            return combineLatest([this._options, this._position]).pipe(map(([options, position]) => {\n                const combinedOptions = Object.assign(Object.assign({}, options), { position: position || options.position, content: this._elementRef.nativeElement });\n                return combinedOptions;\n            }));\n        }\n        _watchForOptionsChanges() {\n            this._options.pipe(takeUntil(this._destroy)).subscribe(options => {\n                this._assertInitialized();\n                this.infoWindow.setOptions(options);\n            });\n        }\n        _watchForPositionChanges() {\n            this._position.pipe(takeUntil(this._destroy)).subscribe(position => {\n                if (position) {\n                    this._assertInitialized();\n                    this.infoWindow.setPosition(position);\n                }\n            });\n        }\n        _assertInitialized() {\n            if (!this._googleMap.googleMap) {\n                throw Error('Cannot access Google Map information before the API has been initialized. ' +\n                    'Please wait for the API to load before trying to interact with it.');\n            }\n            if (!this.infoWindow) {\n                throw Error('Cannot interact with a Google Map Info Window before it has been ' +\n                    'initialized. Please wait for the Info Window to load before trying to interact with ' +\n                    'it.');\n            }\n        }\n    }\n    MapInfoWindow.decorators = [\n        { type: Directive, args: [{\n                    selector: 'map-info-window',\n                    exportAs: 'mapInfoWindow',\n                    host: { 'style': 'display: none' },\n                },] }\n    ];\n    MapInfoWindow.ctorParameters = () => [\n        { type: GoogleMap },\n        { type: ElementRef },\n        { type: NgZone }\n    ];\n    MapInfoWindow.propDecorators = {\n        options: [{ type: Input }],\n        position: [{ type: Input }],\n        closeclick: [{ type: Output }],\n        contentChanged: [{ type: Output }],\n        domready: [{ type: Output }],\n        positionChanged: [{ type: Output }],\n        zindexChanged: [{ type: Output }]\n    };\n    return MapInfoWindow;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Default options for the Google Maps marker component. Displays a marker\n * at the Googleplex.\n */\nconst DEFAULT_MARKER_OPTIONS = {\n    position: { lat: 37.421995, lng: -122.084092 },\n};\n/**\n * Angular component that renders a Google Maps marker via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/marker\n */\nlet MapMarker = /** @class */ (() => {\n    class MapMarker {\n        constructor(_googleMap, _ngZone) {\n            this._googleMap = _googleMap;\n            this._ngZone = _ngZone;\n            this._eventManager = new MapEventManager(this._ngZone);\n            this._options = new BehaviorSubject(DEFAULT_MARKER_OPTIONS);\n            this._title = new BehaviorSubject(undefined);\n            this._position = new BehaviorSubject(undefined);\n            this._label = new BehaviorSubject(undefined);\n            this._clickable = new BehaviorSubject(undefined);\n            this._destroy = new Subject();\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/marker#Marker.animation_changed\n             */\n            this.animationChanged = this._eventManager.getLazyEmitter('animation_changed');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/marker#Marker.click\n             */\n            this.mapClick = this._eventManager.getLazyEmitter('click');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/marker#Marker.clickable_changed\n             */\n            this.clickableChanged = this._eventManager.getLazyEmitter('clickable_changed');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/marker#Marker.cursor_changed\n             */\n            this.cursorChanged = this._eventManager.getLazyEmitter('cursor_changed');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dblclick\n             */\n            this.mapDblclick = this._eventManager.getLazyEmitter('dblclick');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/marker#Marker.drag\n             */\n            this.mapDrag = this._eventManager.getLazyEmitter('drag');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dragend\n             */\n            this.mapDragend = this._eventManager.getLazyEmitter('dragend');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/marker#Marker.draggable_changed\n             */\n            this.draggableChanged = this._eventManager.getLazyEmitter('draggable_changed');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/marker#Marker.dragstart\n             */\n            this.mapDragstart = this._eventManager.getLazyEmitter('dragstart');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/marker#Marker.flat_changed\n             */\n            this.flatChanged = this._eventManager.getLazyEmitter('flat_changed');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/marker#Marker.icon_changed\n             */\n            this.iconChanged = this._eventManager.getLazyEmitter('icon_changed');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mousedown\n             */\n            this.mapMousedown = this._eventManager.getLazyEmitter('mousedown');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseout\n             */\n            this.mapMouseout = this._eventManager.getLazyEmitter('mouseout');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseover\n             */\n            this.mapMouseover = this._eventManager.getLazyEmitter('mouseover');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/marker#Marker.mouseup\n             */\n            this.mapMouseup = this._eventManager.getLazyEmitter('mouseup');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/marker#Marker.position_changed\n             */\n            this.positionChanged = this._eventManager.getLazyEmitter('position_changed');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/marker#Marker.rightclick\n             */\n            this.mapRightclick = this._eventManager.getLazyEmitter('rightclick');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/marker#Marker.shape_changed\n             */\n            this.shapeChanged = this._eventManager.getLazyEmitter('shape_changed');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/marker#Marker.title_changed\n             */\n            this.titleChanged = this._eventManager.getLazyEmitter('title_changed');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/marker#Marker.visible_changed\n             */\n            this.visibleChanged = this._eventManager.getLazyEmitter('visible_changed');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/marker#Marker.zindex_changed\n             */\n            this.zindexChanged = this._eventManager.getLazyEmitter('zindex_changed');\n        }\n        set options(options) {\n            this._options.next(options || DEFAULT_MARKER_OPTIONS);\n        }\n        set title(title) {\n            this._title.next(title);\n        }\n        set position(position) {\n            this._position.next(position);\n        }\n        set label(label) {\n            this._label.next(label);\n        }\n        set clickable(clickable) {\n            this._clickable.next(clickable);\n        }\n        ngOnInit() {\n            if (this._googleMap._isBrowser) {\n                this._combineOptions().pipe(take(1)).subscribe(options => {\n                    // Create the object outside the zone so its events don't trigger change detection.\n                    // We'll bring it back in inside the `MapEventManager` only for the events that the\n                    // user has subscribed to.\n                    this._ngZone.runOutsideAngular(() => this.marker = new google.maps.Marker(options));\n                    this._assertInitialized();\n                    this.marker.setMap(this._googleMap.googleMap);\n                    this._eventManager.setTarget(this.marker);\n                });\n                this._watchForOptionsChanges();\n                this._watchForTitleChanges();\n                this._watchForPositionChanges();\n                this._watchForLabelChanges();\n                this._watchForClickableChanges();\n            }\n        }\n        ngOnDestroy() {\n            this._destroy.next();\n            this._destroy.complete();\n            this._eventManager.destroy();\n            if (this.marker) {\n                this.marker.setMap(null);\n            }\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getAnimation\n         */\n        getAnimation() {\n            this._assertInitialized();\n            return this.marker.getAnimation() || null;\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getClickable\n         */\n        getClickable() {\n            this._assertInitialized();\n            return this.marker.getClickable();\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getCursor\n         */\n        getCursor() {\n            this._assertInitialized();\n            return this.marker.getCursor() || null;\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getDraggable\n         */\n        getDraggable() {\n            this._assertInitialized();\n            return !!this.marker.getDraggable();\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getIcon\n         */\n        getIcon() {\n            this._assertInitialized();\n            return this.marker.getIcon() || null;\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getLabel\n         */\n        getLabel() {\n            this._assertInitialized();\n            return this.marker.getLabel() || null;\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getOpacity\n         */\n        getOpacity() {\n            this._assertInitialized();\n            return this.marker.getOpacity() || null;\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getPosition\n         */\n        getPosition() {\n            this._assertInitialized();\n            return this.marker.getPosition() || null;\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getShape\n         */\n        getShape() {\n            this._assertInitialized();\n            return this.marker.getShape() || null;\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getTitle\n         */\n        getTitle() {\n            this._assertInitialized();\n            return this.marker.getTitle() || null;\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getVisible\n         */\n        getVisible() {\n            this._assertInitialized();\n            return this.marker.getVisible();\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/marker#Marker.getZIndex\n         */\n        getZIndex() {\n            this._assertInitialized();\n            return this.marker.getZIndex() || null;\n        }\n        /** Gets the anchor point that can be used to attach other Google Maps objects. */\n        getAnchor() {\n            this._assertInitialized();\n            return this.marker;\n        }\n        _combineOptions() {\n            return combineLatest([this._options, this._title, this._position, this._label, this._clickable])\n                .pipe(map(([options, title, position, label, clickable]) => {\n                const combinedOptions = Object.assign(Object.assign({}, options), { title: title || options.title, position: position || options.position, label: label || options.label, clickable: clickable !== undefined ? clickable : options.clickable, map: this._googleMap.googleMap });\n                return combinedOptions;\n            }));\n        }\n        _watchForOptionsChanges() {\n            this._options.pipe(takeUntil(this._destroy)).subscribe(options => {\n                if (this.marker) {\n                    this._assertInitialized();\n                    this.marker.setOptions(options);\n                }\n            });\n        }\n        _watchForTitleChanges() {\n            this._title.pipe(takeUntil(this._destroy)).subscribe(title => {\n                if (this.marker && title !== undefined) {\n                    this._assertInitialized();\n                    this.marker.setTitle(title);\n                }\n            });\n        }\n        _watchForPositionChanges() {\n            this._position.pipe(takeUntil(this._destroy)).subscribe(position => {\n                if (this.marker && position) {\n                    this._assertInitialized();\n                    this.marker.setPosition(position);\n                }\n            });\n        }\n        _watchForLabelChanges() {\n            this._label.pipe(takeUntil(this._destroy)).subscribe(label => {\n                if (this.marker && label !== undefined) {\n                    this._assertInitialized();\n                    this.marker.setLabel(label);\n                }\n            });\n        }\n        _watchForClickableChanges() {\n            this._clickable.pipe(takeUntil(this._destroy)).subscribe(clickable => {\n                if (this.marker && clickable !== undefined) {\n                    this._assertInitialized();\n                    this.marker.setClickable(clickable);\n                }\n            });\n        }\n        _assertInitialized() {\n            if (!this._googleMap.googleMap) {\n                throw Error('Cannot access Google Map information before the API has been initialized. ' +\n                    'Please wait for the API to load before trying to interact with it.');\n            }\n            if (!this.marker) {\n                throw Error('Cannot interact with a Google Map Marker before it has been ' +\n                    'initialized. Please wait for the Marker to load before trying to interact with it.');\n            }\n        }\n    }\n    MapMarker.decorators = [\n        { type: Directive, args: [{\n                    selector: 'map-marker',\n                    exportAs: 'mapMarker',\n                },] }\n    ];\n    MapMarker.ctorParameters = () => [\n        { type: GoogleMap },\n        { type: NgZone }\n    ];\n    MapMarker.propDecorators = {\n        options: [{ type: Input }],\n        title: [{ type: Input }],\n        position: [{ type: Input }],\n        label: [{ type: Input }],\n        clickable: [{ type: Input }],\n        animationChanged: [{ type: Output }],\n        mapClick: [{ type: Output }],\n        clickableChanged: [{ type: Output }],\n        cursorChanged: [{ type: Output }],\n        mapDblclick: [{ type: Output }],\n        mapDrag: [{ type: Output }],\n        mapDragend: [{ type: Output }],\n        draggableChanged: [{ type: Output }],\n        mapDragstart: [{ type: Output }],\n        flatChanged: [{ type: Output }],\n        iconChanged: [{ type: Output }],\n        mapMousedown: [{ type: Output }],\n        mapMouseout: [{ type: Output }],\n        mapMouseover: [{ type: Output }],\n        mapMouseup: [{ type: Output }],\n        positionChanged: [{ type: Output }],\n        mapRightclick: [{ type: Output }],\n        shapeChanged: [{ type: Output }],\n        titleChanged: [{ type: Output }],\n        visibleChanged: [{ type: Output }],\n        zindexChanged: [{ type: Output }]\n    };\n    return MapMarker;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Angular component that renders a Google Maps Polygon via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon\n */\nlet MapPolygon = /** @class */ (() => {\n    class MapPolygon {\n        constructor(_map, _ngZone) {\n            this._map = _map;\n            this._ngZone = _ngZone;\n            this._eventManager = new MapEventManager(this._ngZone);\n            this._options = new BehaviorSubject({});\n            this._paths = new BehaviorSubject(undefined);\n            this._destroyed = new Subject();\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.click\n             */\n            this.polygonClick = this._eventManager.getLazyEmitter('click');\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.dblclick\n             */\n            this.polygonDblclick = this._eventManager.getLazyEmitter('dblclick');\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.drag\n             */\n            this.polygonDrag = this._eventManager.getLazyEmitter('drag');\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.dragend\n             */\n            this.polygonDragend = this._eventManager.getLazyEmitter('dragend');\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.dragstart\n             */\n            this.polygonDragstart = this._eventManager.getLazyEmitter('dragstart');\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mousedown\n             */\n            this.polygonMousedown = this._eventManager.getLazyEmitter('mousedown');\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mousemove\n             */\n            this.polygonMousemove = this._eventManager.getLazyEmitter('mousemove');\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mouseout\n             */\n            this.polygonMouseout = this._eventManager.getLazyEmitter('mouseout');\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mouseover\n             */\n            this.polygonMouseover = this._eventManager.getLazyEmitter('mouseover');\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.mouseup\n             */\n            this.polygonMouseup = this._eventManager.getLazyEmitter('mouseup');\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.rightclick\n             */\n            this.polygonRightclick = this._eventManager.getLazyEmitter('rightclick');\n        }\n        set options(options) {\n            this._options.next(options || {});\n        }\n        set paths(paths) {\n            this._paths.next(paths);\n        }\n        ngOnInit() {\n            if (this._map._isBrowser) {\n                this._combineOptions().pipe(take(1)).subscribe(options => {\n                    // Create the object outside the zone so its events don't trigger change detection.\n                    // We'll bring it back in inside the `MapEventManager` only for the events that the\n                    // user has subscribed to.\n                    this._ngZone.runOutsideAngular(() => {\n                        this.polygon = new google.maps.Polygon(options);\n                    });\n                    this._assertInitialized();\n                    this.polygon.setMap(this._map.googleMap);\n                    this._eventManager.setTarget(this.polygon);\n                });\n                this._watchForOptionsChanges();\n                this._watchForPathChanges();\n            }\n        }\n        ngOnDestroy() {\n            this._eventManager.destroy();\n            this._destroyed.next();\n            this._destroyed.complete();\n            if (this.polygon) {\n                this.polygon.setMap(null);\n            }\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getDraggable\n         */\n        getDraggable() {\n            this._assertInitialized();\n            return this.polygon.getDraggable();\n        }\n        /**\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getEditable\n         */\n        getEditable() {\n            this._assertInitialized();\n            return this.polygon.getEditable();\n        }\n        /**\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getPath\n         */\n        getPath() {\n            this._assertInitialized();\n            return this.polygon.getPath();\n        }\n        /**\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getPaths\n         */\n        getPaths() {\n            this._assertInitialized();\n            return this.polygon.getPaths();\n        }\n        /**\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polygon.getVisible\n         */\n        getVisible() {\n            this._assertInitialized();\n            return this.polygon.getVisible();\n        }\n        _combineOptions() {\n            return combineLatest([this._options, this._paths]).pipe(map(([options, paths]) => {\n                const combinedOptions = Object.assign(Object.assign({}, options), { paths: paths || options.paths });\n                return combinedOptions;\n            }));\n        }\n        _watchForOptionsChanges() {\n            this._options.pipe(takeUntil(this._destroyed)).subscribe(options => {\n                this._assertInitialized();\n                this.polygon.setOptions(options);\n            });\n        }\n        _watchForPathChanges() {\n            this._paths.pipe(takeUntil(this._destroyed)).subscribe(paths => {\n                if (paths) {\n                    this._assertInitialized();\n                    this.polygon.setPaths(paths);\n                }\n            });\n        }\n        _assertInitialized() {\n            if (!this._map.googleMap) {\n                throw Error('Cannot access Google Map information before the API has been initialized. ' +\n                    'Please wait for the API to load before trying to interact with it.');\n            }\n            if (!this.polygon) {\n                throw Error('Cannot interact with a Google Map Polygon before it has been ' +\n                    'initialized. Please wait for the Polygon to load before trying to interact with it.');\n            }\n        }\n    }\n    MapPolygon.decorators = [\n        { type: Directive, args: [{\n                    selector: 'map-polygon',\n                    exportAs: 'mapPolygon',\n                },] }\n    ];\n    MapPolygon.ctorParameters = () => [\n        { type: GoogleMap },\n        { type: NgZone }\n    ];\n    MapPolygon.propDecorators = {\n        options: [{ type: Input }],\n        paths: [{ type: Input }],\n        polygonClick: [{ type: Output }],\n        polygonDblclick: [{ type: Output }],\n        polygonDrag: [{ type: Output }],\n        polygonDragend: [{ type: Output }],\n        polygonDragstart: [{ type: Output }],\n        polygonMousedown: [{ type: Output }],\n        polygonMousemove: [{ type: Output }],\n        polygonMouseout: [{ type: Output }],\n        polygonMouseover: [{ type: Output }],\n        polygonMouseup: [{ type: Output }],\n        polygonRightclick: [{ type: Output }]\n    };\n    return MapPolygon;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Angular component that renders a Google Maps Polyline via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline\n */\nlet MapPolyline = /** @class */ (() => {\n    class MapPolyline {\n        constructor(_map, _ngZone) {\n            this._map = _map;\n            this._ngZone = _ngZone;\n            this._eventManager = new MapEventManager(this._ngZone);\n            this._options = new BehaviorSubject({});\n            this._path = new BehaviorSubject(undefined);\n            this._destroyed = new Subject();\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.click\n             */\n            this.polylineClick = this._eventManager.getLazyEmitter('click');\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.dblclick\n             */\n            this.polylineDblclick = this._eventManager.getLazyEmitter('dblclick');\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.drag\n             */\n            this.polylineDrag = this._eventManager.getLazyEmitter('drag');\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.dragend\n             */\n            this.polylineDragend = this._eventManager.getLazyEmitter('dragend');\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.dragstart\n             */\n            this.polylineDragstart = this._eventManager.getLazyEmitter('dragstart');\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mousedown\n             */\n            this.polylineMousedown = this._eventManager.getLazyEmitter('mousedown');\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mousemove\n             */\n            this.polylineMousemove = this._eventManager.getLazyEmitter('mousemove');\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mouseout\n             */\n            this.polylineMouseout = this._eventManager.getLazyEmitter('mouseout');\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mouseover\n             */\n            this.polylineMouseover = this._eventManager.getLazyEmitter('mouseover');\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.mouseup\n             */\n            this.polylineMouseup = this._eventManager.getLazyEmitter('mouseup');\n            /**\n             * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.rightclick\n             */\n            this.polylineRightclick = this._eventManager.getLazyEmitter('rightclick');\n        }\n        set options(options) {\n            this._options.next(options || {});\n        }\n        set path(path) {\n            this._path.next(path);\n        }\n        ngOnInit() {\n            if (this._map._isBrowser) {\n                this._combineOptions().pipe(take(1)).subscribe(options => {\n                    // Create the object outside the zone so its events don't trigger change detection.\n                    // We'll bring it back in inside the `MapEventManager` only for the events that the\n                    // user has subscribed to.\n                    this._ngZone.runOutsideAngular(() => this.polyline = new google.maps.Polyline(options));\n                    this._assertInitialized();\n                    this.polyline.setMap(this._map.googleMap);\n                    this._eventManager.setTarget(this.polyline);\n                });\n                this._watchForOptionsChanges();\n                this._watchForPathChanges();\n            }\n        }\n        ngOnDestroy() {\n            this._eventManager.destroy();\n            this._destroyed.next();\n            this._destroyed.complete();\n            if (this.polyline) {\n                this.polyline.setMap(null);\n            }\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.getDraggable\n         */\n        getDraggable() {\n            this._assertInitialized();\n            return this.polyline.getDraggable();\n        }\n        /**\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.getEditable\n         */\n        getEditable() {\n            this._assertInitialized();\n            return this.polyline.getEditable();\n        }\n        /**\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.getPath\n         */\n        getPath() {\n            this._assertInitialized();\n            // @breaking-change 11.0.0 Make the return value nullable.\n            return this.polyline.getPath();\n        }\n        /**\n         * See developers.google.com/maps/documentation/javascript/reference/polygon#Polyline.getVisible\n         */\n        getVisible() {\n            this._assertInitialized();\n            return this.polyline.getVisible();\n        }\n        _combineOptions() {\n            return combineLatest([this._options, this._path]).pipe(map(([options, path]) => {\n                const combinedOptions = Object.assign(Object.assign({}, options), { path: path || options.path });\n                return combinedOptions;\n            }));\n        }\n        _watchForOptionsChanges() {\n            this._options.pipe(takeUntil(this._destroyed)).subscribe(options => {\n                this._assertInitialized();\n                this.polyline.setOptions(options);\n            });\n        }\n        _watchForPathChanges() {\n            this._path.pipe(takeUntil(this._destroyed)).subscribe(path => {\n                if (path) {\n                    this._assertInitialized();\n                    this.polyline.setPath(path);\n                }\n            });\n        }\n        _assertInitialized() {\n            if (!this._map.googleMap) {\n                throw Error('Cannot access Google Map information before the API has been initialized. ' +\n                    'Please wait for the API to load before trying to interact with it.');\n            }\n            if (!this.polyline) {\n                throw Error('Cannot interact with a Google Map Polyline before it has been ' +\n                    'initialized. Please wait for the Polyline to load before trying to interact with it.');\n            }\n        }\n    }\n    MapPolyline.decorators = [\n        { type: Directive, args: [{\n                    selector: 'map-polyline',\n                    exportAs: 'mapPolyline',\n                },] }\n    ];\n    MapPolyline.ctorParameters = () => [\n        { type: GoogleMap },\n        { type: NgZone }\n    ];\n    MapPolyline.propDecorators = {\n        options: [{ type: Input }],\n        path: [{ type: Input }],\n        polylineClick: [{ type: Output }],\n        polylineDblclick: [{ type: Output }],\n        polylineDrag: [{ type: Output }],\n        polylineDragend: [{ type: Output }],\n        polylineDragstart: [{ type: Output }],\n        polylineMousedown: [{ type: Output }],\n        polylineMousemove: [{ type: Output }],\n        polylineMouseout: [{ type: Output }],\n        polylineMouseover: [{ type: Output }],\n        polylineMouseup: [{ type: Output }],\n        polylineRightclick: [{ type: Output }]\n    };\n    return MapPolyline;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Angular component that renders a Google Maps Rectangle via the Google Maps JavaScript API.\n *\n * See developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle\n */\nlet MapRectangle = /** @class */ (() => {\n    class MapRectangle {\n        constructor(_map, _ngZone) {\n            this._map = _map;\n            this._ngZone = _ngZone;\n            this._eventManager = new MapEventManager(this._ngZone);\n            this._options = new BehaviorSubject({});\n            this._bounds = new BehaviorSubject(undefined);\n            this._destroyed = new Subject();\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.boundsChanged\n             */\n            this.boundsChanged = this._eventManager.getLazyEmitter('bounds_changed');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.click\n             */\n            this.rectangleClick = this._eventManager.getLazyEmitter('click');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.dblclick\n             */\n            this.rectangleDblclick = this._eventManager.getLazyEmitter('dblclick');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.drag\n             */\n            this.rectangleDrag = this._eventManager.getLazyEmitter('drag');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.dragend\n             */\n            this.rectangleDragend = this._eventManager.getLazyEmitter('dragend');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.dragstart\n             */\n            this.rectangleDragstart = this._eventManager.getLazyEmitter('dragstart');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mousedown\n             */\n            this.rectangleMousedown = this._eventManager.getLazyEmitter('mousedown');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mousemove\n             */\n            this.rectangleMousemove = this._eventManager.getLazyEmitter('mousemove');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mouseout\n             */\n            this.rectangleMouseout = this._eventManager.getLazyEmitter('mouseout');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mouseover\n             */\n            this.rectangleMouseover = this._eventManager.getLazyEmitter('mouseover');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.mouseup\n             */\n            this.rectangleMouseup = this._eventManager.getLazyEmitter('mouseup');\n            /**\n             * See\n             * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.rightclick\n             */\n            this.rectangleRightclick = this._eventManager.getLazyEmitter('rightclick');\n        }\n        set options(options) {\n            this._options.next(options || {});\n        }\n        set bounds(bounds) {\n            this._bounds.next(bounds);\n        }\n        ngOnInit() {\n            if (this._map._isBrowser) {\n                this._combineOptions().pipe(take(1)).subscribe(options => {\n                    // Create the object outside the zone so its events don't trigger change detection.\n                    // We'll bring it back in inside the `MapEventManager` only for the events that the\n                    // user has subscribed to.\n                    this._ngZone.runOutsideAngular(() => {\n                        this.rectangle = new google.maps.Rectangle(options);\n                    });\n                    this._assertInitialized();\n                    this.rectangle.setMap(this._map.googleMap);\n                    this._eventManager.setTarget(this.rectangle);\n                });\n                this._watchForOptionsChanges();\n                this._watchForBoundsChanges();\n            }\n        }\n        ngOnDestroy() {\n            this._eventManager.destroy();\n            this._destroyed.next();\n            this._destroyed.complete();\n            if (this.rectangle) {\n                this.rectangle.setMap(null);\n            }\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.getBounds\n         */\n        getBounds() {\n            this._assertInitialized();\n            return this.rectangle.getBounds();\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.getDraggable\n         */\n        getDraggable() {\n            this._assertInitialized();\n            return this.rectangle.getDraggable();\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.getEditable\n         */\n        getEditable() {\n            this._assertInitialized();\n            return this.rectangle.getEditable();\n        }\n        /**\n         * See\n         * developers.google.com/maps/documentation/javascript/reference/polygon#Rectangle.getVisible\n         */\n        getVisible() {\n            this._assertInitialized();\n            return this.rectangle.getVisible();\n        }\n        _combineOptions() {\n            return combineLatest([this._options, this._bounds]).pipe(map(([options, bounds]) => {\n                const combinedOptions = Object.assign(Object.assign({}, options), { bounds: bounds || options.bounds });\n                return combinedOptions;\n            }));\n        }\n        _watchForOptionsChanges() {\n            this._options.pipe(takeUntil(this._destroyed)).subscribe(options => {\n                this._assertInitialized();\n                this.rectangle.setOptions(options);\n            });\n        }\n        _watchForBoundsChanges() {\n            this._bounds.pipe(takeUntil(this._destroyed)).subscribe(bounds => {\n                if (bounds) {\n                    this._assertInitialized();\n                    this.rectangle.setBounds(bounds);\n                }\n            });\n        }\n        _assertInitialized() {\n            if (!this._map.googleMap) {\n                throw Error('Cannot access Google Map information before the API has been initialized. ' +\n                    'Please wait for the API to load before trying to interact with it.');\n            }\n            if (!this.rectangle) {\n                throw Error('Cannot interact with a Google Map Rectangle before it has been ' +\n                    'initialized. Please wait for the Rectangle to load before trying to interact with it.');\n            }\n        }\n    }\n    MapRectangle.decorators = [\n        { type: Directive, args: [{\n                    selector: 'map-rectangle',\n                    exportAs: 'mapRectangle',\n                },] }\n    ];\n    MapRectangle.ctorParameters = () => [\n        { type: GoogleMap },\n        { type: NgZone }\n    ];\n    MapRectangle.propDecorators = {\n        options: [{ type: Input }],\n        bounds: [{ type: Input }],\n        boundsChanged: [{ type: Output }],\n        rectangleClick: [{ type: Output }],\n        rectangleDblclick: [{ type: Output }],\n        rectangleDrag: [{ type: Output }],\n        rectangleDragend: [{ type: Output }],\n        rectangleDragstart: [{ type: Output }],\n        rectangleMousedown: [{ type: Output }],\n        rectangleMousemove: [{ type: Output }],\n        rectangleMouseout: [{ type: Output }],\n        rectangleMouseover: [{ type: Output }],\n        rectangleMouseup: [{ type: Output }],\n        rectangleRightclick: [{ type: Output }]\n    };\n    return MapRectangle;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst COMPONENTS = [\n    GoogleMap,\n    MapCircle,\n    MapGroundOverlay,\n    MapInfoWindow,\n    MapMarker,\n    MapPolygon,\n    MapPolyline,\n    MapRectangle,\n];\nlet GoogleMapsModule = /** @class */ (() => {\n    class GoogleMapsModule {\n    }\n    GoogleMapsModule.decorators = [\n        { type: NgModule, args: [{\n                    declarations: COMPONENTS,\n                    exports: COMPONENTS,\n                },] }\n    ];\n    return GoogleMapsModule;\n})();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { GoogleMap, GoogleMapsModule, MapCircle, MapGroundOverlay, MapInfoWindow, MapMarker, MapPolygon, MapPolyline, MapRectangle };\n"]}